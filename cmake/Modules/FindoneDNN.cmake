# - Try to find oneDNN
#
# The following are set after configuration is done:
#  ONEDNN_FOUND          : set to true if oneDNN is found.
#  ONEDNN_INCLUDE_DIR    : path to oneDNN include dir.
#  ONEDNN_LIBRARY        : list of libraries for oneDNN
#

IF (NOT ONEDNN_FOUND)
SET(ONEDNN_FOUND OFF)

SET(ONEDNN_LIBRARY)
SET(ONEDNN_INCLUDE_DIR)
SET(DNNL_INCLUDES)

SET(THIRD_PARTY_DIR "${PROJECT_SOURCE_DIR}/third_party")
SET(ONEDNN_DIR "oneDNN")
SET(ONEDNN_ROOT "${THIRD_PARTY_DIR}/${ONEDNN_DIR}")

FIND_PATH(ONEDNN_INCLUDE_DIR dnnl.hpp dnnl.h PATHS ${ONEDNN_ROOT} PATH_SUFFIXES include NO_DEFAULT_PATH)
IF(NOT ONEDNN_INCLUDE_DIR)
    FIND_PACKAGE(Git)
    IF(NOT Git_FOUND)
      MESSAGE(FATAL_ERROR "Can not find Git executable!")
    ENDIF()
    EXECUTE_PROCESS(
      COMMAND ${GIT_EXECUTABLE} submodule update --init ${ONEDNN_DIR}
      WORKING_DIRECTORY ${THIRD_PARTY_DIR} COMMAND_ERROR_IS_FATAL ANY)
    FIND_PATH(ONEDNN_INCLUDE_DIR dnnl.hpp dnnl.h PATHS ${ONEDNN_ROOT} PATH_SUFFIXES include NO_DEFAULT_PATH)
ENDIF(NOT ONEDNN_INCLUDE_DIR)

IF(NOT ONEDNN_INCLUDE_DIR)
  MESSAGE(FATAL_ERROR "oneDNN source files not found!")
ENDIF(NOT ONEDNN_INCLUDE_DIR)

SET(DNNL_ENABLE_PRIMITIVE_CACHE TRUE CACHE BOOL "oneDNN sycl primitive cache" FORCE)

SET(DNNL_LIBRARY_TYPE STATIC CACHE STRING "" FORCE)

SET(DNNL_CPU_RUNTIME "THREADPOOL" CACHE STRING "oneDNN cpu backend" FORCE)
SET(DNNL_GPU_RUNTIME "SYCL" CACHE STRING "oneDNN gpu backend" FORCE)
SET(DNNL_BUILD_TESTS FALSE CACHE BOOL "build with oneDNN tests" FORCE)
SET(DNNL_BUILD_EXAMPLES FALSE CACHE BOOL "build with oneDNN examples" FORCE)
SET(DNNL_ENABLE_CONCURRENT_EXEC TRUE CACHE BOOL "multi-thread primitive execution" FORCE)
SET(DNNL_EXPERIMENTAL TRUE CACHE BOOL "use one pass for oneDNN BatchNorm" FORCE)

ADD_SUBDIRECTORY(${ONEDNN_ROOT} oneDNN EXCLUDE_FROM_ALL)
SET(ONEDNN_LIBRARY ${DNNL_LIBRARY_NAME})
IF(NOT TARGET ${ONEDNN_LIBRARY})
  MESSAGE(FATAL_ERROR "Failed to include oneDNN target")
ENDIF(NOT TARGET ${ONEDNN_LIBRARY})

IF(NOT APPLE AND CMAKE_COMPILER_IS_GNUCC)
  TARGET_COMPILE_OPTIONS(${ONEDNN_LIBRARY} PRIVATE -Wno-uninitialized)
  TARGET_COMPILE_OPTIONS(${ONEDNN_LIBRARY} PRIVATE -Wno-strict-overflow)
  TARGET_COMPILE_OPTIONS(${ONEDNN_LIBRARY} PRIVATE -Wno-error=strict-overflow)
ENDIF(NOT APPLE AND CMAKE_COMPILER_IS_GNUCC)

TARGET_COMPILE_OPTIONS(${ONEDNN_LIBRARY} PRIVATE -Wno-tautological-compare)
GET_TARGET_PROPERTY(DNNL_INCLUDES ${ONEDNN_LIBRARY} INCLUDE_DIRECTORIES)
TARGET_LINK_LIBRARIES(${ONEDNN_LIBRARY} PRIVATE ze_loader)
list(APPEND ONEDNN_INCLUDE_DIR ${DNNL_INCLUDES})

# Upper level targets should not load header files from oneDNN's third party.
LIST(FILTER ONEDNN_INCLUDE_DIR EXCLUDE REGEX
      ".*third_party/oneDNN/third_party.*")

SET(ONEDNN_FOUND ON)
MESSAGE(STATUS "Found oneDNN: TRUE")

ENDIF(NOT ONEDNN_FOUND)